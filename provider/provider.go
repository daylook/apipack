package provider

import "errors"

//ToDo: func RemoveTPProviderByName() error {}
//ToDo: func RemoveTPProviderByID() error {}
//ToDo: func RemoveTPProviderByBase() error {}

// Provider is API Provider
type Provider struct {
	// ID must be generated by GenID() automatically
	ID   string `json:"id"`
	Name string `json:"name"`
	// ToDo: Tokens
	// ToDo: API steps
	Services []struct {
		ID   string `json:"id"`
		Name string `json:"name"`
		Base string `json:"base"` //Base URL
		Apps []struct {
			APIs []struct {
				Type   string `json:"apiType"` //SOAP, REST, ...
				Routes []struct {
					URI  string     `json:"URI"`
					SOAP []struct { //ToDo: More information needed
						TmplName    string `json:"tmplName"`
						TmplAddress string `json:"tmplAddress"`
					} `json:"soap"`
					REST []struct {
						Method string `json:"apiMethod"` // GET, POST, ...
						// ToDo: More think about querystring
						Query string `json:"apiQuery"` // querystring, json, ....
					} `json:"rest"`
				} `json:"routes"`
			} `json:"apis"`
		} `json:"apps"`
	} `json:"Services"`
}

// Providers to keep data of different added tpproviders.
type Providers []Provider

var providers = Providers{}

// NewProvider to create new Provider type
func NewProvider() *Provider {
	return new(Provider)
}

// AddProvider to aad to the providers list
func (pro *Provider) AddProvider() error {
	for _, anypro := range providers {
		if anypro.ID == pro.ID && anypro.Name == pro.Name {
			return errors.New("You have already added this provider")
		}
		providers = append(providers, pro)
		return nil
	}
}

// GetServices retruns all the defined services in the provider
func (p *Provider) GetServices() interface{} {
	return p.Services
}
